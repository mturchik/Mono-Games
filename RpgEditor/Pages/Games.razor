@page "/Games"
@inject GameManager GameManager

<h3>Games</h3>

<div class="container-fluid">
    @if (GameForm != null)
    {
        <div class="row">
            <div class="col-sm-6">

                <EditForm Model="GameForm" OnValidSubmit="SubmitForm">
                    <DataAnnotationsValidator />

                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label">Name:</div>
                        </div>
                        <div class="col-9">
                            <InputText class="form-control" @bind-Value="GameForm.Name"></InputText>
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label ">Description:</div>
                        </div>
                        <div class="col-9">
                            <InputTextArea class="form-control" @bind-Value="GameForm.Description"></InputTextArea>
                        </div>
                    </div>

                    <button class="btn btn-primary mb-2 me-2" type="submit">Create</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => GameForm = null">Cancel</button>

                    <ValidationSummary />

                </EditForm>

            </div>
            <hr />
        </div>
    }
    <div class="row mt-3">
        <div class="col-sm-12 mb-3">
            @if (GameForm == null)
            {
                <button class="btn btn-primary" @onclick="() => GameForm = new()">Create New</button>
            }
        </div>
        <div class="col-sm-12">
            <table class="table table-bordered table-primary table-responsive table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Loaded</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var rpg in RpgList)
                    {
                        <tr>
                            <td>@rpg.Name</td>
                            <td>@rpg.Description</td>
                            <td>
                                @if (GameManager.LoadedGame?.Id == rpg.Id)
                                {
                                    <button class="btn btn-secondary" @onclick="() => LoadGame(null)">Unload</button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" @onclick="() => LoadGame(rpg)">Load</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    Form? GameForm { get; set; }
    List<RolePlayingGame> RpgList = new();
    RolePlayingGame? LoadedGame;

    protected override void OnInitialized()
    {
        var appData = new DirectoryInfo(FileSystem.Current.AppDataDirectory);
        if (!appData.GetDirectories().Any(d => d.Name == "Games"))
            appData.CreateSubdirectory("Games");

        var gamesDirectory = new DirectoryInfo(FileSystem.Current.AppDataDirectory + "\\Games");
        foreach (var gameDir in gamesDirectory.EnumerateDirectories())
        {
            RpgList.Add(XnaSerializer.Deserialize<RolePlayingGame>(gameDir.FullName + "/Game.xml"));
            InitializeDirectories(gameDir);
        }

        LoadedGame = GameManager.LoadedGame;
    }

    void LoadGame(RolePlayingGame? rpg)
    {
        LoadedGame = rpg;
        GameManager.LoadedGame = rpg;
    }

    void InitializeDirectories(DirectoryInfo gameDir)
    {
        var subDirs = gameDir.GetDirectories();
        if (!subDirs.Any(d => d.Name == "Classes")) gameDir.CreateSubdirectory("Classes");

        var itemsDir = subDirs.FirstOrDefault(d => d.Name == "Items");
        if (itemsDir is null) itemsDir = gameDir.CreateSubdirectory("Items");

        var itemsSubDirs = itemsDir.GetDirectories();
        if (!itemsSubDirs.Any(d => d.Name == "Armors")) itemsDir.CreateSubdirectory("Armors");
        if (!itemsSubDirs.Any(d => d.Name == "Shields")) itemsDir.CreateSubdirectory("Shields");
        if (!itemsSubDirs.Any(d => d.Name == "Weapons")) itemsDir.CreateSubdirectory("Weapons");
    }

    void SubmitForm()
    {
        if (GameForm is null) return;

        var rpg = new RolePlayingGame(GameForm.Name, GameForm.Description);

        var gamesDirectory = new DirectoryInfo(FileSystem.Current.AppDataDirectory + "\\Games");
        var newGameDir = gamesDirectory.CreateSubdirectory($"{rpg.Id}");
        XnaSerializer.Serialize(newGameDir.FullName + "/Game.xml", rpg);
        InitializeDirectories(newGameDir);

        RpgList.Add(rpg);
        GameForm = null;
    }

    class Form
    {
        [Required, StringLength(100, MinimumLength = 3)]
        public string Name { get; set; } = "";
        [Required, StringLength(500, MinimumLength = 3)]
        public string Description { get; set; } = "";
    }
}
