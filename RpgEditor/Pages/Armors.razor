@page "/Armors"
@inject ItemDataManager DataManager

<h3>Armors</h3>

<div class="container-fluid">
    @if (ArmorForm != null)
    {
        <EditForm Model="ArmorForm" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-6">
                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label">Name:</div>
                        </div>
                        <div class="col-3">
                            <InputText class="form-control" @bind-Value="ArmorForm.Name"></InputText>
                        </div>
                        <div class="col-3 text-end">
                            <div class="form-label">Type:</div>
                        </div>
                        <div class="col-3">
                            <InputText class="form-control" @bind-Value="ArmorForm.Type"></InputText>
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label">Price:</div>
                        </div>
                        <div class="col-3">
                            <InputNumber class="form-control" @bind-Value="ArmorForm.Price"></InputNumber>
                        </div>
                        <div class="col-3 text-end">
                            <div class="form-label">Weight:</div>
                        </div>
                        <div class="col-3">
                            <InputNumber class="form-control" @bind-Value="ArmorForm.Weight"></InputNumber>
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label">Defense Value:</div>
                        </div>
                        <div class="col-3">
                            <InputNumber class="form-control" @bind-Value="ArmorForm.DefenseValue"></InputNumber>
                        </div>
                        <div class="col-3 text-end">
                            <div class="form-label">Defense Modifier:</div>
                        </div>
                        <div class="col-3">
                            <InputNumber class="form-control" @bind-Value="ArmorForm.DefenseModifier"></InputNumber>
                        </div>
                    </div>

                </div>

                <div class="col-6">
                    <div class="row mb-2">
                        <div class="col-3 text-end">
                            <div class="form-label">Location:</div>
                        </div>
                        <div class="col-3">
                            <InputSelect class="form-control" @bind-Value="ArmorForm.ArmorLocation">
                                @foreach (var location in Enum.GetValues<ArmorLocation>())
                                {
                                    <option value="@location">@location</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-3">
                            <div class="form-label text-end">Allowable Classes:</div>
                        </div>
                        <div class="col-3">
                            <InputSelect class="form-control" @bind-Value="ArmorForm.AllowableClasses">
                                @foreach (var className in ClassNameList)
                                {
                                    <option value="@className">@className</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>

            </div>

            <button class="btn btn-primary me-2" type="submit">Create</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="() => ArmorForm = null">Cancel</button>

            <ValidationSummary />

        </EditForm>
        <hr />
    }
    <div class="row mt-3">
        <div class="col-sm-12 mb-3">
            @if (ArmorForm == null)
            {
                <button class="btn btn-primary" @onclick="() => ArmorForm = new()">Create New</button>
            }
        </div>
        <div class="col-sm-12">
            <table class="table table-bordered table-primary table-responsive table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Price</th>
                        <th>Weight</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var armor in ArmorList)
                    {
                        <tr>
                            <td>@armor.Name</td>
                            <td>@armor.Type</td>
                            <td>@armor.Price</td>
                            <td>@armor.Weight</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    Form? ArmorForm { get; set; }
    List<ArmorData> ArmorList = new();
    List<string> ClassNameList = new() { "Warrior", "Rogue", "Priest", "Wizard" };

    protected override void OnInitialized()
    {
        ArmorList.AddRange(DataManager.ArmorData.Values);
    }

    void SubmitForm()
    {
        if (ArmorForm is null) return;

        //var shield = new ArmorData(
        //    ArmorForm.Name,
        //    ArmorForm.Type,
        //    ArmorForm.Price,
        //    ArmorForm.Weight,
        //    ArmorForm.ArmorLocation,
        //    ArmorForm.DefenseValue,
        //    ArmorForm.DefenseModifier,
        //    ArmorForm.AllowableClasses
        //);
        //ArmorList.Add(shield);
        ArmorForm = null;
    }

    class Form
    {
        [Required, StringLength(100, MinimumLength = 3)]
        public string Name { get; set; } = "";
        [Required, StringLength(100, MinimumLength = 3)]
        public string Type { get; set; } = "";
        [Required]
        public int Price { get; set; }
        [Required]
        public float Weight { get; set; }
        [Required]
        public ArmorLocation ArmorLocation { get; set; }
        [Required]
        public int DefenseValue { get; set; }
        [Required]
        public int DefenseModifier { get; set; }
        [Required]
        public string[] AllowableClasses { get; set; } = new string[] { };
    }
}